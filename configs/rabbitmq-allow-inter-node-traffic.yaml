apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-inter-node-traffic
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: rabbitmq
      app.kubernetes.io/name: network-policies
  policyTypes:
  - Ingress
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: rabbitmq
          app.kubernetes.io/name: network-policies
    ports:
    - port: 4369  # epmd
    - port: 6000  # stream replication, if streams are being used
      endPort: 6500 # if your cluster version is below 1.22 (see below) you should use a helm loop or something similar
    - port: 25672 # clustering
    - port: 35672 # CLI tooling
    - port: 35673 # CLI tooling
    - port: 35674 # CLI tooling
    - port: 35675 # CLI tooling
    - port: 35676 # CLI tooling
    - port: 35677 # CLI tooling
    - port: 35678 # CLI tooling
    - port: 35679 # CLI tooling
    - port: 35680 # CLI tooling
    - port: 35681 # CLI tooling
    - port: 35682 # CLI tooling
    # Erlang port mapper daemon (epmd)
    - protocol: TCP
      port: 4369
    # Rabbit clustering port AMQP + 20000
    - protocol: TCP
      port: 25672
    # NOTE(lamt): Set by inet_dist_listen_{min/max}. Firewalls must
    # permit traffic in this range to pass between clustered nodes.
    # - protocol: TCP
    #  port: 35197
  # If using the k8s feature gate NetworkPolicyEndPort (enabled by default 1.22+), the last 11 entries can be simplified to:
  # - port: 35672 # CLI tooling
  #   endPort: 35682
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: rabbitmq
          app.kubernetes.io/name: network-policies
    - podSelector:
        matchLabels:
          application: keystone
    - podSelector:
        matchLabels:
          application: heat
    - podSelector:
        matchLabels:
          application: glance
    - podSelector:
        matchLabels:
          application: cinder
    - podSelector:
        matchLabels:
          application: aodh
    - podSelector:
        matchLabels:
          application: barbican
    - podSelector:
        matchLabels:
          application: ceilometer
    - podSelector:
        matchLabels:
          application: designate
    - podSelector:
        matchLabels:
          application: ironic
    - podSelector:
        matchLabels:
          application: magnum
    - podSelector:
        matchLabels:
          application: mistral
    - podSelector:
        matchLabels:
          application: nova
    - podSelector:
        matchLabels:
          application: neutron
    - podSelector:
        matchLabels:
          application: senlin
    - podSelector:
        matchLabels:
          application: placement
    - podSelector:
        matchLabels:
          application: rabbitmq
    - podSelector:
        matchLabels:
          application: prometheus_rabbitmq_exporter
    ports:
    - port: 4369  # epmd
    - port: 6000  # stream replication, if streams are being used
      endPort: 6500 # if your cluster version is below 1.22 (see below) you should use a helm loop or something similar
    - port: 25672 # clustering
    - port: 35672 # CLI tooling
    - port: 35673 # CLI tooling
    - port: 35674 # CLI tooling
    - port: 35675 # CLI tooling
    - port: 35676 # CLI tooling
    - port: 35677 # CLI tooling
    - port: 35678 # CLI tooling
    - port: 35679 # CLI tooling
    - port: 35680 # CLI tooling
    - port: 35681 # CLI tooling
    - port: 35682 # CLI tooling
    # AMQP port
    - protocol: TCP
      port: 5672
    # HTTP API ports
    - protocol: TCP
      port: 15672
    - protocol: TCP
      port: 80
  # If using the k8s feature gate NetworkPolicyEndPort (enabled by default 1.22+), the last 11 entries can be simplified to:
  # - port: 35672 # CLI tooling
  #   endPort: 35682
